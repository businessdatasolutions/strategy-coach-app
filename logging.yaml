# Alternative YAML-based logging configuration
# This can be used instead of the Python-based configuration

version: 1
disable_existing_loggers: false

formatters:
  standard:
    format: '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  detailed:
    format: '%(asctime)s [%(levelname)s] %(name)s:%(lineno)d - %(funcName)s() - %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  json:
    '()': src.utils.logging_config.JSONFormatter

handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: standard
    stream: ext://sys.stdout
  
  file:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: detailed
    filename: logs/app.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
    encoding: utf8
  
  error_file:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: json
    filename: logs/errors.log
    maxBytes: 10485760  # 10MB
    backupCount: 10
    encoding: utf8

loggers:
  '':  # Root logger
    level: INFO
    handlers: [console, file, error_file]
    propagate: false
  
  src:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  src.agents:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  src.api:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  uvicorn:
    level: INFO
    handlers: [console]
    propagate: false
  
  uvicorn.access:
    level: WARNING
    handlers: [file]
    propagate: false
  
  fastapi:
    level: WARNING
    handlers: [console, file]
    propagate: false
  
  httpx:
    level: WARNING
    handlers: [file]
    propagate: false
  
  openai:
    level: WARNING
    handlers: [file]
    propagate: false
  
  anthropic:
    level: WARNING
    handlers: [file]
    propagate: false